# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module TempoFull
  include Treetop::Runtime

  def root
    @root ||= :tempo_full
  end

  include TempoPartial

  include Duration

  module TempoFull0
    def tempo_partial
      elements[0]
    end

    def duration
      elements[2]
    end
  end

  def _nt_tempo_full
    start_index = index
    if node_cache[:tempo_full].has_key?(index)
      cached = node_cache[:tempo_full][index]
      if cached
        node_cache[:tempo_full][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_tempo_partial
    s0 << r1
    if r1
      if (match_len = has_terminal?(",", false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure(",")
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_duration
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(TempoFullNode,input, i0...index, s0)
      r0.extend(TempoFull0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tempo_full][start_index] = r0

    r0
  end

end

class TempoFullParser < Treetop::Runtime::CompiledParser
  include TempoFull
end


end