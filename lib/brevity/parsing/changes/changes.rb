# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Changes
  include Treetop::Runtime

  def root
    @root ||= :changes
  end

  include DynamicChange

  include TempoChange

  def _nt_changes
    start_index = index
    if node_cache[:changes].has_key?(index)
      cached = node_cache[:changes][index]
      if cached
        node_cache[:changes][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_tempo_dynamic_changes
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_dynamic_tempo_changes
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:changes][start_index] = r0

    r0
  end

  module TempoDynamicChanges0
    def dynamic_change
      elements[1]
    end
  end

  module TempoDynamicChanges1
    def tc
      elements[0]
    end

    def more
      elements[1]
    end
  end

  def _nt_tempo_dynamic_changes
    start_index = index
    if node_cache[:tempo_dynamic_changes].has_key?(index)
      cached = node_cache[:tempo_dynamic_changes][index]
      if cached
        node_cache[:tempo_dynamic_changes][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_tempo_change
    s0 << r1
    if r1
      i3, s3 = index, []
      s4, i4 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
          r5 = true
          @index += 1
        else
          terminal_parse_failure('[\\s]')
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s3 << r4
      if r4
        r6 = _nt_dynamic_change
        s3 << r6
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(TempoDynamicChanges0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(TempoDynamicChangesNode,input, i0...index, s0)
      r0.extend(TempoDynamicChanges1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tempo_dynamic_changes][start_index] = r0

    r0
  end

  module DynamicTempoChanges0
    def tempo_change
      elements[1]
    end
  end

  module DynamicTempoChanges1
    def dc
      elements[0]
    end

    def more
      elements[1]
    end
  end

  def _nt_dynamic_tempo_changes
    start_index = index
    if node_cache[:dynamic_tempo_changes].has_key?(index)
      cached = node_cache[:dynamic_tempo_changes][index]
      if cached
        node_cache[:dynamic_tempo_changes][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_dynamic_change
    s0 << r1
    if r1
      i3, s3 = index, []
      s4, i4 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
          r5 = true
          @index += 1
        else
          terminal_parse_failure('[\\s]')
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s3 << r4
      if r4
        r6 = _nt_tempo_change
        s3 << r6
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(DynamicTempoChanges0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(DynamicTempoChangesNode,input, i0...index, s0)
      r0.extend(DynamicTempoChanges1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:dynamic_tempo_changes][start_index] = r0

    r0
  end

end

class ChangesParser < Treetop::Runtime::CompiledParser
  include Changes
end


end
