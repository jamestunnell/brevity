# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module TempoPartial
  include Treetop::Runtime

  def root
    @root ||= :tempo_partial
  end

  include PositiveInteger

  module TempoPartial0
    def positive_integer
      elements[1]
    end
  end

  def _nt_tempo_partial
    start_index = index
    if node_cache[:tempo_partial].has_key?(index)
      cached = node_cache[:tempo_partial][index]
      if cached
        node_cache[:tempo_partial][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("@", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure("@")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_positive_integer
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(TempoPartialNode,input, i0...index, s0)
      r0.extend(TempoPartial0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tempo_partial][start_index] = r0

    r0
  end

end

class TempoPartialParser < Treetop::Runtime::CompiledParser
  include TempoPartial
end


end