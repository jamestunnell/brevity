# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module File
  include Treetop::Runtime

  def root
    @root ||= :file
  end

  include Comment

  include Command

  module File0
    def node
      elements[1]
    end
  end

  module File1
    def nodes
      elements[0]
    end

  end

  def _nt_file
    start_index = index
    if node_cache[:file].has_key?(index)
      cached = node_cache[:file][index]
      if cached
        node_cache[:file][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2, s2 = index, []
      s3, i3 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
          r4 = true
          @index += 1
        else
          terminal_parse_failure('[\\s]')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s2 << r3
      if r3
        r5 = _nt_node
        s2 << r5
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(File0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      s6, i6 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
          r7 = true
          @index += 1
        else
          terminal_parse_failure('[\\s]')
          r7 = nil
        end
        if r7
          s6 << r7
        else
          break
        end
      end
      r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      s0 << r6
    end
    if s0.last
      r0 = instantiate_node(FileNode,input, i0...index, s0)
      r0.extend(File1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:file][start_index] = r0

    r0
  end

  def _nt_node
    start_index = index
    if node_cache[:node].has_key?(index)
      cached = node_cache[:node][index]
      if cached
        node_cache[:node][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_comment
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_command
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:node][start_index] = r0

    r0
  end

end

class FileParser < Treetop::Runtime::CompiledParser
  include File
end


end
