# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Export
  include Treetop::Runtime

  def root
    @root ||= :export
  end

  include Label

  include String

  module Export0
    def pair
      elements[3]
    end
  end

  module Export1
    def first
      elements[0]
    end

    def more
      elements[1]
    end
  end

  module Export2
    def pairs
      elements[2]
    end

  end

  def _nt_export
    start_index = index
    if node_cache[:export].has_key?(index)
      cached = node_cache[:export][index]
      if cached
        node_cache[:export][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("{", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure("{")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[\\s]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        i5, s5 = index, []
        r6 = _nt_pair
        s5 << r6
        if r6
          s7, i7 = [], index
          loop do
            i8, s8 = index, []
            s9, i9 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
                r10 = true
                @index += 1
              else
                terminal_parse_failure('[\\s]')
                r10 = nil
              end
              if r10
                s9 << r10
              else
                break
              end
            end
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            s8 << r9
            if r9
              if (match_len = has_terminal?(",", false, index))
                r11 = true
                @index += match_len
              else
                terminal_parse_failure(",")
                r11 = nil
              end
              s8 << r11
              if r11
                s12, i12 = [], index
                loop do
                  if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
                    r13 = true
                    @index += 1
                  else
                    terminal_parse_failure('[\\s]')
                    r13 = nil
                  end
                  if r13
                    s12 << r13
                  else
                    break
                  end
                end
                r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                s8 << r12
                if r12
                  r14 = _nt_pair
                  s8 << r14
                end
              end
            end
            if s8.last
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              r8.extend(Export0)
            else
              @index = i8
              r8 = nil
            end
            if r8
              s7 << r8
            else
              break
            end
          end
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(Export1)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          s15, i15 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
              r16 = true
              @index += 1
            else
              terminal_parse_failure('[\\s]')
              r16 = nil
            end
            if r16
              s15 << r16
            else
              break
            end
          end
          r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
          s0 << r15
          if r15
            if (match_len = has_terminal?("}", false, index))
              r17 = true
              @index += match_len
            else
              terminal_parse_failure("}")
              r17 = nil
            end
            s0 << r17
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ExportNode,input, i0...index, s0)
      r0.extend(Export2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:export][start_index] = r0

    r0
  end

  module Pair0
    def string
      elements[0]
    end

    def label
      elements[4]
    end
  end

  def _nt_pair
    start_index = index
    if node_cache[:pair].has_key?(index)
      cached = node_cache[:pair][index]
      if cached
        node_cache[:pair][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_string
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[\\s]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?(":", false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure(":")
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
              r6 = true
              @index += 1
            else
              terminal_parse_failure('[\\s]')
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_label
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Pair0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:pair][start_index] = r0

    r0
  end

end

class ExportParser < Treetop::Runtime::CompiledParser
  include Export
end


end