# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Path
  include Treetop::Runtime

  def root
    @root ||= :path
  end

  module Path0
  end

  module Path1
    def name
      elements[2]
    end
  end

  def _nt_path
    start_index = index
    if node_cache[:path].has_key?(index)
      cached = node_cache[:path][index]
      if cached
        node_cache[:path][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2 = index
    if (match_len = has_terminal?("./", false, index))
      r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure("./")
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      if (match_len = has_terminal?("/", false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure("/")
        r4 = nil
      end
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s5, i5 = [], index
      loop do
        i6, s6 = index, []
        i7 = index
        if (match_len = has_terminal?("..", false, index))
          r8 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure("..")
          r8 = nil
        end
        if r8
          r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
          r7 = r8
        else
          r9 = _nt_name
          if r9
            r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
            r7 = r9
          else
            @index = i7
            r7 = nil
          end
        end
        s6 << r7
        if r7
          if (match_len = has_terminal?("/", false, index))
            r10 = true
            @index += match_len
          else
            terminal_parse_failure("/")
            r10 = nil
          end
          s6 << r10
        end
        if s6.last
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          r6.extend(Path0)
        else
          @index = i6
          r6 = nil
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s0 << r5
      if r5
        r11 = _nt_name
        s0 << r11
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Path1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:path][start_index] = r0

    r0
  end

  module Name0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        node_cache[:name][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2 = index
    if (match_len = has_terminal?(".", false, index))
      r3 = true
      @index += match_len
    else
      terminal_parse_failure(".")
      r3 = nil
    end
    if r3
      r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
      r2 = r3
    else
      if (match_len = has_terminal?("..", false, index))
        r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure("..")
        r4 = nil
      end
      if r4
        r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
        r2 = r4
      else
        @index = i2
        r2 = nil
      end
    end
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      s5, i5 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[A-Za-z0-9_,:\\.]'] ||= Regexp.new(gr), :regexp, index)
          r6 = true
          @index += 1
        else
          terminal_parse_failure('[A-Za-z0-9_,:\\.]')
          r6 = nil
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      if s5.empty?
        @index = i5
        r5 = nil
      else
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
      end
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Name0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:name][start_index] = r0

    r0
  end

end

class PathParser < Treetop::Runtime::CompiledParser
  include Path
end


end