# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Accent
  include Treetop::Runtime

  def root
    @root ||= :accent
  end

  def _nt_accent
    start_index = index
    if node_cache[:accent].has_key?(index)
      cached = node_cache[:accent][index]
      if cached
        node_cache[:accent][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?(@regexps[gr = '\A[.\'>^_]'] ||= Regexp.new(gr), :regexp, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[.\'>^_]')
      r0 = nil
    end

    node_cache[:accent][start_index] = r0

    r0
  end

end

class AccentParser < Treetop::Runtime::CompiledParser
  include Accent
end


end