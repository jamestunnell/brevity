# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module DuplicateSequence
  include Treetop::Runtime

  def root
    @root ||= :duplicate_sequence
  end

  include Sequence

  include Nonzero

  module DuplicateSequence0
    def sequence
      elements[2]
    end

    def ntimes
      elements[5]
    end
  end

  def _nt_duplicate_sequence
    start_index = index
    if node_cache[:duplicate_sequence].has_key?(index)
      cached = node_cache[:duplicate_sequence][index]
      if cached
        node_cache[:duplicate_sequence][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?("(", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
          r3 = true
          @index += 1
        else
          terminal_parse_failure('[\\s]')
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_sequence
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
              r6 = true
              @index += 1
            else
              terminal_parse_failure('[\\s]')
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if (match_len = has_terminal?("):", false, index))
              r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure("):")
              r7 = nil
            end
            s0 << r7
            if r7
              r8 = _nt_nonzero_number
              s0 << r8
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(DuplicateSequenceNode,input, i0...index, s0)
      r0.extend(DuplicateSequence0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:duplicate_sequence][start_index] = r0

    r0
  end

end

class DuplicateSequenceParser < Treetop::Runtime::CompiledParser
  include DuplicateSequence
end


end
