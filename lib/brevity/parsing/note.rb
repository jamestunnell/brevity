# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Note
  include Treetop::Runtime

  def root
    @root ||= :note
  end

  include Pitch

  include Accent

  include Link

  include Duration

  module Note0
    def pitch
      elements[1]
    end

  end

  module Note1
    def pitch
      elements[1]
    end

  end

  module Note2
    def duration
      elements[0]
    end

  end

  def _nt_note
    start_index = index
    if node_cache[:note].has_key?(index)
      cached = node_cache[:note][index]
      if cached
        node_cache[:note][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_duration
    s0 << r1
    if r1
      i3, s3 = index, []
      if (match_len = has_terminal?("@", false, index))
        r4 = true
        @index += match_len
      else
        terminal_parse_failure("@")
        r4 = nil
      end
      s3 << r4
      if r4
        r5 = _nt_pitch
        s3 << r5
        if r5
          r7 = _nt_link
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r6
          if r6
            s8, i8 = [], index
            loop do
              i9, s9 = index, []
              if (match_len = has_terminal?(",", false, index))
                r10 = true
                @index += match_len
              else
                terminal_parse_failure(",")
                r10 = nil
              end
              s9 << r10
              if r10
                r11 = _nt_pitch
                s9 << r11
                if r11
                  r13 = _nt_link
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s9 << r12
                end
              end
              if s9.last
                r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                r9.extend(Note0)
              else
                @index = i9
                r9 = nil
              end
              if r9
                s8 << r9
              else
                break
              end
            end
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            s3 << r8
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(Note1)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r15 = _nt_accent
        if r15
          r14 = r15
        else
          r14 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r14
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Note2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:note][start_index] = r0

    r0
  end

end

class NoteParser < Treetop::Runtime::CompiledParser
  include Note
end


end