# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Note
  include Treetop::Runtime

  def root
    @root ||= :note
  end

  include Pitch

  include Accent

  include Link

  include Duration

  module Note0
    def pitch
      elements[1]
    end

  end

  module Note1
    def pitch
      elements[1]
    end

  end

  module Note2
    def duration
      elements[1]
    end

  end

  def _nt_note
    start_index = index
    if node_cache[:note].has_key?(index)
      cached = node_cache[:note][index]
      if cached
        node_cache[:note][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_accent
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_duration
      s0 << r3
      if r3
        i5, s5 = index, []
        if (match_len = has_terminal?("@", false, index))
          r6 = true
          @index += match_len
        else
          terminal_parse_failure("@")
          r6 = nil
        end
        s5 << r6
        if r6
          r7 = _nt_pitch
          s5 << r7
          if r7
            r9 = _nt_link
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r8
            if r8
              s10, i10 = [], index
              loop do
                i11, s11 = index, []
                if (match_len = has_terminal?(",", false, index))
                  r12 = true
                  @index += match_len
                else
                  terminal_parse_failure(",")
                  r12 = nil
                end
                s11 << r12
                if r12
                  r13 = _nt_pitch
                  s11 << r13
                  if r13
                    r15 = _nt_link
                    if r15
                      r14 = r15
                    else
                      r14 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s11 << r14
                  end
                end
                if s11.last
                  r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                  r11.extend(Note0)
                else
                  @index = i11
                  r11 = nil
                end
                if r11
                  s10 << r11
                else
                  break
                end
              end
              r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
              s5 << r10
            end
          end
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(Note1)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Note2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:note][start_index] = r0

    r0
  end

end

class NoteParser < Treetop::Runtime::CompiledParser
  include Note
end


end