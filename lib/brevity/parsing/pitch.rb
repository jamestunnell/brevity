# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Pitch
  include Treetop::Runtime

  def root
    @root ||= :pitch
  end

  module Pitch0
  end

  def _nt_pitch
    start_index = index
    if node_cache[:pitch].has_key?(index)
      cached = node_cache[:pitch][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Ga-g]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[#b]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        if has_terminal?('\G[0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Pitch0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:pitch][start_index] = r0

    r0
  end

end

class PitchParser < Treetop::Runtime::CompiledParser
  include Pitch
end


end