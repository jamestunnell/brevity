# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Gradual
  include Treetop::Runtime

  def root
    @root ||= :gradual
  end

  def _nt_gradual
    start_index = index
    if node_cache[:gradual].has_key?(index)
      cached = node_cache[:gradual][index]
      if cached
        node_cache[:gradual][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if (match_len = has_terminal?("<", false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure("<")
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      if (match_len = has_terminal?(">", false, index))
        r2 = instantiate_node(GradualNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure(">")
        r2 = nil
      end
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:gradual][start_index] = r0

    r0
  end

end

class GradualParser < Treetop::Runtime::CompiledParser
  include Gradual
end


end
