# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Link
  include Treetop::Runtime

  def root
    @root ||= :link
  end

  include Pitch

  module Link0
    def link_sym
      elements[0]
    end

    def target
      elements[1]
    end
  end

  def _nt_link
    start_index = index
    if node_cache[:link].has_key?(index)
      cached = node_cache[:link][index]
      if cached
        node_cache[:link][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(@regexps[gr = '\A[=\\-~/]'] ||= Regexp.new(gr), :regexp, index)
      r1 = true
      @index += 1
    else
      terminal_parse_failure('[=\\-~/]')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_pitch
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(LinkNode,input, i0...index, s0)
      r0.extend(Link0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:link][start_index] = r0

    r0
  end

end

class LinkParser < Treetop::Runtime::CompiledParser
  include Link
end


end