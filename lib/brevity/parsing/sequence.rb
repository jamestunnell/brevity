# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Sequence
  include Treetop::Runtime

  def root
    @root ||= :sequence
  end

  include Dynamic

  include Note

  module Sequence0
    def note
      elements[0]
    end

  end

  module Sequence1
    def spaced_notes
      elements[1]
    end
  end

  def _nt_sequence
    start_index = index
    if node_cache[:sequence].has_key?(index)
      cached = node_cache[:sequence][index]
      if cached
        node_cache[:sequence][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
        r2 = true
        @index += 1
      else
        terminal_parse_failure('[\\s]')
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      s3, i3 = [], index
      loop do
        i4, s4 = index, []
        r5 = _nt_note
        s4 << r5
        if r5
          s6, i6 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[\\s]'] ||= Regexp.new(gr), :regexp, index)
              r7 = true
              @index += 1
            else
              terminal_parse_failure('[\\s]')
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s4 << r6
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(Sequence0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      if s3.empty?
        @index = i3
        r3 = nil
      else
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SequenceNode,input, i0...index, s0)
      r0.extend(Sequence1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:sequence][start_index] = r0

    r0
  end

end

class SequenceParser < Treetop::Runtime::CompiledParser
  include Sequence
end


end