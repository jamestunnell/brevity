# Autogenerated from a Treetop grammar. Edits may be lost.


module Brevity

module Duration
  include Treetop::Runtime

  def root
    @root ||= :duration
  end

  include Nonzero

  module Duration0
  end

  module Duration1
    def nonzero_number
      elements[0]
    end

  end

  module Duration2
    def nonzero_number
      elements[1]
    end
  end

  def _nt_duration
    start_index = index
    if node_cache[:duration].has_key?(index)
      cached = node_cache[:duration][index]
      if cached
        node_cache[:duration][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_nonzero_number
    s1 << r2
    if r2
      i4, s4 = index, []
      if (match_len = has_terminal?("/", false, index))
        r5 = true
        @index += match_len
      else
        terminal_parse_failure("/")
        r5 = nil
      end
      s4 << r5
      if r5
        r7 = _nt_nonzero_number
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s4 << r6
      end
      if s4.last
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        r4.extend(Duration0)
      else
        @index = i4
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(Duration1)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      i8, s8 = index, []
      if (match_len = has_terminal?("/", false, index))
        r9 = true
        @index += match_len
      else
        terminal_parse_failure("/")
        r9 = nil
      end
      s8 << r9
      if r9
        r10 = _nt_nonzero_number
        s8 << r10
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(Duration2)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
        r0 = r8
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:duration][start_index] = r0

    r0
  end

end

class DurationParser < Treetop::Runtime::CompiledParser
  include Duration
end


end